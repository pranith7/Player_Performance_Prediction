2023-01-20 16:07:36,261:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-01-20 16:07:36,262:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-01-20 16:07:36,262:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-01-20 16:07:36,262:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-01-20 16:07:36,830:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-01-20 16:13:06,003:INFO:PyCaret RegressionExperiment
2023-01-20 16:13:06,003:INFO:Logging name: reg-default-name
2023-01-20 16:13:06,003:INFO:ML Usecase: MLUsecase.REGRESSION
2023-01-20 16:13:06,003:INFO:version 3.0.0.rc8
2023-01-20 16:13:06,003:INFO:Initializing setup()
2023-01-20 16:13:06,003:INFO:self.USI: f0d6
2023-01-20 16:13:06,003:INFO:self._variable_keys: {'fold_generator', 'seed', 'fold_groups_param', 'memory', 'X_test', 'pipeline', 'fold_shuffle_param', 'data', 'y_train', 'logging_param', 'idx', 'transform_target_param', 'exp_id', 'html_param', 'y', 'gpu_param', '_ml_usecase', 'y_test', 'exp_name_log', 'X_train', 'X', 'n_jobs_param', 'gpu_n_jobs_param', 'log_plots_param', 'USI', '_available_plots', 'target_param'}
2023-01-20 16:13:06,004:INFO:Checking environment
2023-01-20 16:13:06,004:INFO:python_version: 3.10.6
2023-01-20 16:13:06,004:INFO:python_build: ('main', 'Nov 14 2022 16:10:14')
2023-01-20 16:13:06,004:INFO:machine: x86_64
2023-01-20 16:13:06,004:INFO:platform: Linux-5.15.0-58-generic-x86_64-with-glibc2.35
2023-01-20 16:13:06,004:INFO:Memory: svmem(total=8173723648, available=2754523136, percent=66.3, used=4198850560, free=304283648, active=1766952960, inactive=5224321024, buffers=157110272, cached=3513479168, shared=869683200, slab=477265920)
2023-01-20 16:13:06,005:INFO:Physical Core: 4
2023-01-20 16:13:06,005:INFO:Logical Core: 8
2023-01-20 16:13:06,005:INFO:Checking libraries
2023-01-20 16:13:06,005:INFO:System:
2023-01-20 16:13:06,005:INFO:    python: 3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]
2023-01-20 16:13:06,005:INFO:executable: /bin/python3
2023-01-20 16:13:06,005:INFO:   machine: Linux-5.15.0-58-generic-x86_64-with-glibc2.35
2023-01-20 16:13:06,005:INFO:PyCaret required dependencies:
2023-01-20 16:13:06,005:INFO:                 pip: 22.0.2
2023-01-20 16:13:06,005:INFO:          setuptools: 59.6.0
2023-01-20 16:13:06,005:INFO:             pycaret: 3.0.0rc8
2023-01-20 16:13:06,005:INFO:             IPython: 8.8.0
2023-01-20 16:13:06,005:INFO:          ipywidgets: 8.0.4
2023-01-20 16:13:06,005:INFO:                tqdm: 4.64.1
2023-01-20 16:13:06,005:INFO:               numpy: 1.23.5
2023-01-20 16:13:06,005:INFO:              pandas: 1.5.3
2023-01-20 16:13:06,005:INFO:              jinja2: 3.1.2
2023-01-20 16:13:06,005:INFO:               scipy: 1.10.0
2023-01-20 16:13:06,005:INFO:              joblib: 1.2.0
2023-01-20 16:13:06,005:INFO:             sklearn: 1.1.3
2023-01-20 16:13:06,005:INFO:                pyod: 1.0.7
2023-01-20 16:13:06,005:INFO:            imblearn: 0.10.1
2023-01-20 16:13:06,006:INFO:   category_encoders: 2.6.0
2023-01-20 16:13:06,006:INFO:            lightgbm: 3.3.4
2023-01-20 16:13:06,006:INFO:               numba: 0.56.4
2023-01-20 16:13:06,006:INFO:            requests: 2.25.1
2023-01-20 16:13:06,006:INFO:          matplotlib: 3.6.3
2023-01-20 16:13:06,006:INFO:          scikitplot: 0.3.7
2023-01-20 16:13:06,006:INFO:         yellowbrick: 1.5
2023-01-20 16:13:06,006:INFO:              plotly: 5.12.0
2023-01-20 16:13:06,006:INFO:             kaleido: 0.2.1
2023-01-20 16:13:06,006:INFO:         statsmodels: 0.13.5
2023-01-20 16:13:06,006:INFO:              sktime: 0.15.1
2023-01-20 16:13:06,006:INFO:               tbats: 1.1.2
2023-01-20 16:13:06,006:INFO:            pmdarima: 2.0.2
2023-01-20 16:13:06,006:INFO:              psutil: 5.9.4
2023-01-20 16:13:06,006:INFO:PyCaret optional dependencies:
2023-01-20 16:13:06,013:INFO:                shap: Not installed
2023-01-20 16:13:06,013:INFO:           interpret: Not installed
2023-01-20 16:13:06,013:INFO:                umap: Not installed
2023-01-20 16:13:06,013:INFO:    pandas_profiling: Not installed
2023-01-20 16:13:06,013:INFO:  explainerdashboard: Not installed
2023-01-20 16:13:06,014:INFO:             autoviz: Not installed
2023-01-20 16:13:06,014:INFO:           fairlearn: Not installed
2023-01-20 16:13:06,014:INFO:             xgboost: Not installed
2023-01-20 16:13:06,014:INFO:            catboost: Not installed
2023-01-20 16:13:06,014:INFO:              kmodes: Not installed
2023-01-20 16:13:06,014:INFO:             mlxtend: Not installed
2023-01-20 16:13:06,014:INFO:       statsforecast: Not installed
2023-01-20 16:13:06,014:INFO:        tune_sklearn: Not installed
2023-01-20 16:13:06,014:INFO:                 ray: Not installed
2023-01-20 16:13:06,014:INFO:            hyperopt: Not installed
2023-01-20 16:13:06,014:INFO:              optuna: Not installed
2023-01-20 16:13:06,014:INFO:               skopt: Not installed
2023-01-20 16:13:06,014:INFO:              mlflow: Not installed
2023-01-20 16:13:06,014:INFO:              gradio: Not installed
2023-01-20 16:13:06,014:INFO:             fastapi: Not installed
2023-01-20 16:13:06,014:INFO:             uvicorn: Not installed
2023-01-20 16:13:06,014:INFO:              m2cgen: Not installed
2023-01-20 16:13:06,014:INFO:           evidently: Not installed
2023-01-20 16:13:06,014:INFO:                nltk: Not installed
2023-01-20 16:13:06,014:INFO:            pyLDAvis: Not installed
2023-01-20 16:13:06,014:INFO:              gensim: Not installed
2023-01-20 16:13:06,014:INFO:               spacy: Not installed
2023-01-20 16:13:06,014:INFO:           wordcloud: Not installed
2023-01-20 16:13:06,015:INFO:            textblob: Not installed
2023-01-20 16:13:06,015:INFO:               fugue: Not installed
2023-01-20 16:13:06,015:INFO:           streamlit: Not installed
2023-01-20 16:13:06,015:INFO:             prophet: Not installed
2023-01-20 16:13:06,015:INFO:None
2023-01-20 16:13:06,015:INFO:Set up data.
2023-01-20 16:13:06,172:INFO:Set up train/test split.
2023-01-20 16:13:06,224:INFO:Set up index.
2023-01-20 16:13:06,225:INFO:Set up folding strategy.
2023-01-20 16:13:06,226:INFO:Assigning column types.
2023-01-20 16:13:06,235:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-01-20 16:13:06,235:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,241:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,247:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,294:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,328:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,328:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,336:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,336:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,340:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,343:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,387:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,422:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,422:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,422:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,423:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-01-20 16:13:06,426:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,430:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,476:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,512:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,513:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,513:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,517:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,521:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,568:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,604:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,605:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,605:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,606:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-01-20 16:13:06,613:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,662:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,698:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,699:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,699:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,707:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,754:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,795:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,797:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,797:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,797:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-01-20 16:13:06,877:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,915:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-01-20 16:13:06,915:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,915:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:06,970:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:07,006:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-01-20 16:13:07,007:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,007:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,007:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-01-20 16:13:07,064:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:07,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,101:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,157:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-01-20 16:13:07,194:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,194:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,195:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-01-20 16:13:07,289:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,289:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,385:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,385:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:07,386:INFO:Preparing preprocessing pipeline...
2023-01-20 16:13:07,387:INFO:Set up column name cleaning.
2023-01-20 16:13:07,387:INFO:Set up simple imputation.
2023-01-20 16:13:07,575:INFO:Set up encoding of categorical features.
2023-01-20 16:13:07,879:INFO:Finished creating preprocessing pipeline.
2023-01-20 16:13:07,889:INFO:Pipeline: Pipeline(memory=Memory(location=/tmp/joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Unnamed: 0', 'match_id',
                                             'Batsman_runs', 'Balls', 'Fours',
                                             'Sixes', 'Fifties', 'Hundreds',
                                             'Duck', 'strike_rate'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrappe...
                 TransformerWrapper(include=['batting_team', 'bowling_team',
                                             'type'],
                                    transformer=OneHotEncoder(cols=['batting_team',
                                                                    'bowling_team',
                                                                    'type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['start_date', 'striker', 'bowler'],
                                    transformer=LeaveOneOutEncoder(cols=['start_date',
                                                                         'striker',
                                                                         'bowler'],
                                                                   handle_missing='return_nan',
                                                                   random_state=1808)))])
2023-01-20 16:13:07,889:INFO:Creating final display dataframe.
2023-01-20 16:13:08,836:INFO:Setup _display_container:                     Description             Value
0                    Session id              1808
1                        Target     dreamll_score
2                   Target type        Regression
3           Original data shape        (2647, 17)
4        Transformed data shape        (2647, 38)
5   Transformed train set shape        (1852, 38)
6    Transformed test set shape         (795, 38)
7              Numeric features                10
8          Categorical features                 6
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator             KFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  reg-default-name
21                          USI              f0d6
2023-01-20 16:13:08,940:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:08,940:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:09,030:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:09,031:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-01-20 16:13:09,032:INFO:setup() successfully completed in 3.03s...............
2023-01-20 16:13:48,187:INFO:Initializing compare_models()
2023-01-20 16:13:48,188:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-01-20 16:13:48,188:INFO:Checking exceptions
2023-01-20 16:13:48,192:INFO:Preparing display monitor
2023-01-20 16:13:48,215:INFO:Initializing Linear Regression
2023-01-20 16:13:48,215:INFO:Total runtime is 1.6808509826660156e-06 minutes
2023-01-20 16:13:48,218:INFO:SubProcess create_model() called ==================================
2023-01-20 16:13:48,218:INFO:Initializing create_model()
2023-01-20 16:13:48,218:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:13:48,218:INFO:Checking exceptions
2023-01-20 16:13:48,218:INFO:Importing libraries
2023-01-20 16:13:48,218:INFO:Copying training dataset
2023-01-20 16:13:48,222:INFO:Defining folds
2023-01-20 16:13:48,222:INFO:Declaring metric variables
2023-01-20 16:13:48,225:INFO:Importing untrained model
2023-01-20 16:13:48,228:INFO:Linear Regression Imported successfully
2023-01-20 16:13:48,234:INFO:Starting cross validation
2023-01-20 16:13:48,238:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:01,464:INFO:Calculating mean and std
2023-01-20 16:14:01,466:INFO:Creating metrics dataframe
2023-01-20 16:14:01,470:INFO:Uploading results into container
2023-01-20 16:14:01,470:INFO:Uploading model into container now
2023-01-20 16:14:01,471:INFO:_master_model_container: 1
2023-01-20 16:14:01,471:INFO:_display_container: 2
2023-01-20 16:14:01,471:INFO:LinearRegression(n_jobs=-1)
2023-01-20 16:14:01,471:INFO:create_model() successfully completed......................................
2023-01-20 16:14:01,591:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:01,591:INFO:Creating metrics dataframe
2023-01-20 16:14:01,606:INFO:Initializing Lasso Regression
2023-01-20 16:14:01,606:INFO:Total runtime is 0.22319134473800661 minutes
2023-01-20 16:14:01,612:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:01,612:INFO:Initializing create_model()
2023-01-20 16:14:01,613:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:01,613:INFO:Checking exceptions
2023-01-20 16:14:01,613:INFO:Importing libraries
2023-01-20 16:14:01,613:INFO:Copying training dataset
2023-01-20 16:14:01,620:INFO:Defining folds
2023-01-20 16:14:01,620:INFO:Declaring metric variables
2023-01-20 16:14:01,626:INFO:Importing untrained model
2023-01-20 16:14:01,631:INFO:Lasso Regression Imported successfully
2023-01-20 16:14:01,645:INFO:Starting cross validation
2023-01-20 16:14:01,649:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:02,301:INFO:Calculating mean and std
2023-01-20 16:14:02,302:INFO:Creating metrics dataframe
2023-01-20 16:14:02,305:INFO:Uploading results into container
2023-01-20 16:14:02,306:INFO:Uploading model into container now
2023-01-20 16:14:02,306:INFO:_master_model_container: 2
2023-01-20 16:14:02,306:INFO:_display_container: 2
2023-01-20 16:14:02,306:INFO:Lasso(random_state=1808)
2023-01-20 16:14:02,306:INFO:create_model() successfully completed......................................
2023-01-20 16:14:02,401:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:02,402:INFO:Creating metrics dataframe
2023-01-20 16:14:02,417:INFO:Initializing Ridge Regression
2023-01-20 16:14:02,417:INFO:Total runtime is 0.23671065966288252 minutes
2023-01-20 16:14:02,422:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:02,423:INFO:Initializing create_model()
2023-01-20 16:14:02,423:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:02,423:INFO:Checking exceptions
2023-01-20 16:14:02,423:INFO:Importing libraries
2023-01-20 16:14:02,423:INFO:Copying training dataset
2023-01-20 16:14:02,431:INFO:Defining folds
2023-01-20 16:14:02,431:INFO:Declaring metric variables
2023-01-20 16:14:02,436:INFO:Importing untrained model
2023-01-20 16:14:02,443:INFO:Ridge Regression Imported successfully
2023-01-20 16:14:02,455:INFO:Starting cross validation
2023-01-20 16:14:02,458:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:02,801:INFO:Calculating mean and std
2023-01-20 16:14:02,802:INFO:Creating metrics dataframe
2023-01-20 16:14:02,805:INFO:Uploading results into container
2023-01-20 16:14:02,806:INFO:Uploading model into container now
2023-01-20 16:14:02,806:INFO:_master_model_container: 3
2023-01-20 16:14:02,807:INFO:_display_container: 2
2023-01-20 16:14:02,807:INFO:Ridge(random_state=1808)
2023-01-20 16:14:02,807:INFO:create_model() successfully completed......................................
2023-01-20 16:14:02,906:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:02,906:INFO:Creating metrics dataframe
2023-01-20 16:14:02,923:INFO:Initializing Elastic Net
2023-01-20 16:14:02,923:INFO:Total runtime is 0.24513583183288576 minutes
2023-01-20 16:14:02,928:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:02,928:INFO:Initializing create_model()
2023-01-20 16:14:02,928:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:02,929:INFO:Checking exceptions
2023-01-20 16:14:02,929:INFO:Importing libraries
2023-01-20 16:14:02,929:INFO:Copying training dataset
2023-01-20 16:14:02,937:INFO:Defining folds
2023-01-20 16:14:02,937:INFO:Declaring metric variables
2023-01-20 16:14:02,942:INFO:Importing untrained model
2023-01-20 16:14:02,949:INFO:Elastic Net Imported successfully
2023-01-20 16:14:02,960:INFO:Starting cross validation
2023-01-20 16:14:02,962:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:03,294:INFO:Calculating mean and std
2023-01-20 16:14:03,295:INFO:Creating metrics dataframe
2023-01-20 16:14:03,298:INFO:Uploading results into container
2023-01-20 16:14:03,300:INFO:Uploading model into container now
2023-01-20 16:14:03,300:INFO:_master_model_container: 4
2023-01-20 16:14:03,300:INFO:_display_container: 2
2023-01-20 16:14:03,300:INFO:ElasticNet(random_state=1808)
2023-01-20 16:14:03,300:INFO:create_model() successfully completed......................................
2023-01-20 16:14:03,399:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:03,400:INFO:Creating metrics dataframe
2023-01-20 16:14:03,419:INFO:Initializing Least Angle Regression
2023-01-20 16:14:03,420:INFO:Total runtime is 0.2534158269564311 minutes
2023-01-20 16:14:03,427:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:03,427:INFO:Initializing create_model()
2023-01-20 16:14:03,427:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:03,428:INFO:Checking exceptions
2023-01-20 16:14:03,428:INFO:Importing libraries
2023-01-20 16:14:03,428:INFO:Copying training dataset
2023-01-20 16:14:03,435:INFO:Defining folds
2023-01-20 16:14:03,435:INFO:Declaring metric variables
2023-01-20 16:14:03,441:INFO:Importing untrained model
2023-01-20 16:14:03,448:INFO:Least Angle Regression Imported successfully
2023-01-20 16:14:03,457:INFO:Starting cross validation
2023-01-20 16:14:03,460:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:03,598:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,599:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,601:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,620:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,629:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,639:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,644:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,645:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,775:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,782:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:03,817:INFO:Calculating mean and std
2023-01-20 16:14:03,818:INFO:Creating metrics dataframe
2023-01-20 16:14:03,821:INFO:Uploading results into container
2023-01-20 16:14:03,821:INFO:Uploading model into container now
2023-01-20 16:14:03,822:INFO:_master_model_container: 5
2023-01-20 16:14:03,822:INFO:_display_container: 2
2023-01-20 16:14:03,822:INFO:Lars(random_state=1808)
2023-01-20 16:14:03,822:INFO:create_model() successfully completed......................................
2023-01-20 16:14:03,919:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:03,919:INFO:Creating metrics dataframe
2023-01-20 16:14:03,936:INFO:Initializing Lasso Least Angle Regression
2023-01-20 16:14:03,936:INFO:Total runtime is 0.2620244940121969 minutes
2023-01-20 16:14:03,942:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:03,943:INFO:Initializing create_model()
2023-01-20 16:14:03,943:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:03,943:INFO:Checking exceptions
2023-01-20 16:14:03,943:INFO:Importing libraries
2023-01-20 16:14:03,943:INFO:Copying training dataset
2023-01-20 16:14:03,951:INFO:Defining folds
2023-01-20 16:14:03,951:INFO:Declaring metric variables
2023-01-20 16:14:03,957:INFO:Importing untrained model
2023-01-20 16:14:03,964:INFO:Lasso Least Angle Regression Imported successfully
2023-01-20 16:14:03,975:INFO:Starting cross validation
2023-01-20 16:14:03,978:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:04,110:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,118:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,130:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,131:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,136:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,146:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,159:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,160:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,251:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,262:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-01-20 16:14:04,295:INFO:Calculating mean and std
2023-01-20 16:14:04,297:INFO:Creating metrics dataframe
2023-01-20 16:14:04,300:INFO:Uploading results into container
2023-01-20 16:14:04,300:INFO:Uploading model into container now
2023-01-20 16:14:04,301:INFO:_master_model_container: 6
2023-01-20 16:14:04,301:INFO:_display_container: 2
2023-01-20 16:14:04,301:INFO:LassoLars(random_state=1808)
2023-01-20 16:14:04,301:INFO:create_model() successfully completed......................................
2023-01-20 16:14:04,399:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:04,399:INFO:Creating metrics dataframe
2023-01-20 16:14:04,417:INFO:Initializing Orthogonal Matching Pursuit
2023-01-20 16:14:04,417:INFO:Total runtime is 0.2700404286384583 minutes
2023-01-20 16:14:04,422:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:04,423:INFO:Initializing create_model()
2023-01-20 16:14:04,423:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:04,423:INFO:Checking exceptions
2023-01-20 16:14:04,423:INFO:Importing libraries
2023-01-20 16:14:04,424:INFO:Copying training dataset
2023-01-20 16:14:04,431:INFO:Defining folds
2023-01-20 16:14:04,431:INFO:Declaring metric variables
2023-01-20 16:14:04,436:INFO:Importing untrained model
2023-01-20 16:14:04,442:INFO:Orthogonal Matching Pursuit Imported successfully
2023-01-20 16:14:04,450:INFO:Starting cross validation
2023-01-20 16:14:04,453:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:04,588:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,594:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,606:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,609:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,631:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,638:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,638:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,649:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,741:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,749:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-01-20 16:14:04,784:INFO:Calculating mean and std
2023-01-20 16:14:04,785:INFO:Creating metrics dataframe
2023-01-20 16:14:04,788:INFO:Uploading results into container
2023-01-20 16:14:04,788:INFO:Uploading model into container now
2023-01-20 16:14:04,789:INFO:_master_model_container: 7
2023-01-20 16:14:04,789:INFO:_display_container: 2
2023-01-20 16:14:04,789:INFO:OrthogonalMatchingPursuit()
2023-01-20 16:14:04,789:INFO:create_model() successfully completed......................................
2023-01-20 16:14:04,887:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:04,888:INFO:Creating metrics dataframe
2023-01-20 16:14:04,905:INFO:Initializing Bayesian Ridge
2023-01-20 16:14:04,905:INFO:Total runtime is 0.2781802892684937 minutes
2023-01-20 16:14:04,910:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:04,911:INFO:Initializing create_model()
2023-01-20 16:14:04,911:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:04,911:INFO:Checking exceptions
2023-01-20 16:14:04,911:INFO:Importing libraries
2023-01-20 16:14:04,911:INFO:Copying training dataset
2023-01-20 16:14:04,918:INFO:Defining folds
2023-01-20 16:14:04,918:INFO:Declaring metric variables
2023-01-20 16:14:04,923:INFO:Importing untrained model
2023-01-20 16:14:04,928:INFO:Bayesian Ridge Imported successfully
2023-01-20 16:14:04,936:INFO:Starting cross validation
2023-01-20 16:14:04,938:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:05,297:INFO:Calculating mean and std
2023-01-20 16:14:05,298:INFO:Creating metrics dataframe
2023-01-20 16:14:05,301:INFO:Uploading results into container
2023-01-20 16:14:05,302:INFO:Uploading model into container now
2023-01-20 16:14:05,302:INFO:_master_model_container: 8
2023-01-20 16:14:05,303:INFO:_display_container: 2
2023-01-20 16:14:05,303:INFO:BayesianRidge()
2023-01-20 16:14:05,303:INFO:create_model() successfully completed......................................
2023-01-20 16:14:05,401:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:05,401:INFO:Creating metrics dataframe
2023-01-20 16:14:05,421:INFO:Initializing Passive Aggressive Regressor
2023-01-20 16:14:05,421:INFO:Total runtime is 0.28677270015080775 minutes
2023-01-20 16:14:05,427:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:05,427:INFO:Initializing create_model()
2023-01-20 16:14:05,427:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:05,427:INFO:Checking exceptions
2023-01-20 16:14:05,428:INFO:Importing libraries
2023-01-20 16:14:05,428:INFO:Copying training dataset
2023-01-20 16:14:05,435:INFO:Defining folds
2023-01-20 16:14:05,436:INFO:Declaring metric variables
2023-01-20 16:14:05,443:INFO:Importing untrained model
2023-01-20 16:14:05,449:INFO:Passive Aggressive Regressor Imported successfully
2023-01-20 16:14:05,460:INFO:Starting cross validation
2023-01-20 16:14:05,463:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:05,801:INFO:Calculating mean and std
2023-01-20 16:14:05,802:INFO:Creating metrics dataframe
2023-01-20 16:14:05,805:INFO:Uploading results into container
2023-01-20 16:14:05,805:INFO:Uploading model into container now
2023-01-20 16:14:05,805:INFO:_master_model_container: 9
2023-01-20 16:14:05,806:INFO:_display_container: 2
2023-01-20 16:14:05,806:INFO:PassiveAggressiveRegressor(random_state=1808)
2023-01-20 16:14:05,806:INFO:create_model() successfully completed......................................
2023-01-20 16:14:05,904:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:05,904:INFO:Creating metrics dataframe
2023-01-20 16:14:05,923:INFO:Initializing Huber Regressor
2023-01-20 16:14:05,923:INFO:Total runtime is 0.2951399485270183 minutes
2023-01-20 16:14:05,928:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:05,928:INFO:Initializing create_model()
2023-01-20 16:14:05,928:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:05,928:INFO:Checking exceptions
2023-01-20 16:14:05,929:INFO:Importing libraries
2023-01-20 16:14:05,929:INFO:Copying training dataset
2023-01-20 16:14:05,937:INFO:Defining folds
2023-01-20 16:14:05,937:INFO:Declaring metric variables
2023-01-20 16:14:05,942:INFO:Importing untrained model
2023-01-20 16:14:05,948:INFO:Huber Regressor Imported successfully
2023-01-20 16:14:05,956:INFO:Starting cross validation
2023-01-20 16:14:05,958:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:06,323:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/linear_model/_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-01-20 16:14:06,466:INFO:Calculating mean and std
2023-01-20 16:14:06,467:INFO:Creating metrics dataframe
2023-01-20 16:14:06,471:INFO:Uploading results into container
2023-01-20 16:14:06,472:INFO:Uploading model into container now
2023-01-20 16:14:06,472:INFO:_master_model_container: 10
2023-01-20 16:14:06,472:INFO:_display_container: 2
2023-01-20 16:14:06,472:INFO:HuberRegressor()
2023-01-20 16:14:06,472:INFO:create_model() successfully completed......................................
2023-01-20 16:14:06,569:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:06,569:INFO:Creating metrics dataframe
2023-01-20 16:14:06,590:INFO:Initializing K Neighbors Regressor
2023-01-20 16:14:06,591:INFO:Total runtime is 0.3062676151593527 minutes
2023-01-20 16:14:06,597:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:06,598:INFO:Initializing create_model()
2023-01-20 16:14:06,598:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:06,599:INFO:Checking exceptions
2023-01-20 16:14:06,599:INFO:Importing libraries
2023-01-20 16:14:06,599:INFO:Copying training dataset
2023-01-20 16:14:06,606:INFO:Defining folds
2023-01-20 16:14:06,606:INFO:Declaring metric variables
2023-01-20 16:14:06,612:INFO:Importing untrained model
2023-01-20 16:14:06,618:INFO:K Neighbors Regressor Imported successfully
2023-01-20 16:14:06,628:INFO:Starting cross validation
2023-01-20 16:14:06,631:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:07,146:INFO:Calculating mean and std
2023-01-20 16:14:07,147:INFO:Creating metrics dataframe
2023-01-20 16:14:07,150:INFO:Uploading results into container
2023-01-20 16:14:07,151:INFO:Uploading model into container now
2023-01-20 16:14:07,151:INFO:_master_model_container: 11
2023-01-20 16:14:07,151:INFO:_display_container: 2
2023-01-20 16:14:07,152:INFO:KNeighborsRegressor(n_jobs=-1)
2023-01-20 16:14:07,152:INFO:create_model() successfully completed......................................
2023-01-20 16:14:07,249:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:07,249:INFO:Creating metrics dataframe
2023-01-20 16:14:07,268:INFO:Initializing Decision Tree Regressor
2023-01-20 16:14:07,268:INFO:Total runtime is 0.3175634702046713 minutes
2023-01-20 16:14:07,274:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:07,275:INFO:Initializing create_model()
2023-01-20 16:14:07,275:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:07,275:INFO:Checking exceptions
2023-01-20 16:14:07,275:INFO:Importing libraries
2023-01-20 16:14:07,275:INFO:Copying training dataset
2023-01-20 16:14:07,282:INFO:Defining folds
2023-01-20 16:14:07,282:INFO:Declaring metric variables
2023-01-20 16:14:07,288:INFO:Importing untrained model
2023-01-20 16:14:07,295:INFO:Decision Tree Regressor Imported successfully
2023-01-20 16:14:07,303:INFO:Starting cross validation
2023-01-20 16:14:07,306:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:07,793:INFO:Calculating mean and std
2023-01-20 16:14:07,794:INFO:Creating metrics dataframe
2023-01-20 16:14:07,798:INFO:Uploading results into container
2023-01-20 16:14:07,799:INFO:Uploading model into container now
2023-01-20 16:14:07,799:INFO:_master_model_container: 12
2023-01-20 16:14:07,799:INFO:_display_container: 2
2023-01-20 16:14:07,800:INFO:DecisionTreeRegressor(random_state=1808)
2023-01-20 16:14:07,800:INFO:create_model() successfully completed......................................
2023-01-20 16:14:07,902:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:07,902:INFO:Creating metrics dataframe
2023-01-20 16:14:07,923:INFO:Initializing Random Forest Regressor
2023-01-20 16:14:07,923:INFO:Total runtime is 0.3284737348556519 minutes
2023-01-20 16:14:07,928:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:07,928:INFO:Initializing create_model()
2023-01-20 16:14:07,928:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:07,928:INFO:Checking exceptions
2023-01-20 16:14:07,928:INFO:Importing libraries
2023-01-20 16:14:07,929:INFO:Copying training dataset
2023-01-20 16:14:07,936:INFO:Defining folds
2023-01-20 16:14:07,936:INFO:Declaring metric variables
2023-01-20 16:14:07,941:INFO:Importing untrained model
2023-01-20 16:14:07,947:INFO:Random Forest Regressor Imported successfully
2023-01-20 16:14:07,956:INFO:Starting cross validation
2023-01-20 16:14:07,958:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:09,814:INFO:Calculating mean and std
2023-01-20 16:14:09,815:INFO:Creating metrics dataframe
2023-01-20 16:14:09,818:INFO:Uploading results into container
2023-01-20 16:14:09,819:INFO:Uploading model into container now
2023-01-20 16:14:09,819:INFO:_master_model_container: 13
2023-01-20 16:14:09,820:INFO:_display_container: 2
2023-01-20 16:14:09,820:INFO:RandomForestRegressor(n_jobs=-1, random_state=1808)
2023-01-20 16:14:09,820:INFO:create_model() successfully completed......................................
2023-01-20 16:14:09,915:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:09,915:INFO:Creating metrics dataframe
2023-01-20 16:14:09,935:INFO:Initializing Extra Trees Regressor
2023-01-20 16:14:09,936:INFO:Total runtime is 0.3620185732841492 minutes
2023-01-20 16:14:09,941:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:09,942:INFO:Initializing create_model()
2023-01-20 16:14:09,942:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:09,942:INFO:Checking exceptions
2023-01-20 16:14:09,942:INFO:Importing libraries
2023-01-20 16:14:09,942:INFO:Copying training dataset
2023-01-20 16:14:09,948:INFO:Defining folds
2023-01-20 16:14:09,948:INFO:Declaring metric variables
2023-01-20 16:14:09,953:INFO:Importing untrained model
2023-01-20 16:14:09,960:INFO:Extra Trees Regressor Imported successfully
2023-01-20 16:14:09,969:INFO:Starting cross validation
2023-01-20 16:14:09,972:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:11,795:INFO:Calculating mean and std
2023-01-20 16:14:11,796:INFO:Creating metrics dataframe
2023-01-20 16:14:11,799:INFO:Uploading results into container
2023-01-20 16:14:11,800:INFO:Uploading model into container now
2023-01-20 16:14:11,800:INFO:_master_model_container: 14
2023-01-20 16:14:11,800:INFO:_display_container: 2
2023-01-20 16:14:11,801:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1808)
2023-01-20 16:14:11,801:INFO:create_model() successfully completed......................................
2023-01-20 16:14:11,897:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:11,897:INFO:Creating metrics dataframe
2023-01-20 16:14:11,919:INFO:Initializing AdaBoost Regressor
2023-01-20 16:14:11,920:INFO:Total runtime is 0.39508963425954186 minutes
2023-01-20 16:14:11,927:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:11,927:INFO:Initializing create_model()
2023-01-20 16:14:11,927:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:11,928:INFO:Checking exceptions
2023-01-20 16:14:11,928:INFO:Importing libraries
2023-01-20 16:14:11,928:INFO:Copying training dataset
2023-01-20 16:14:11,935:INFO:Defining folds
2023-01-20 16:14:11,935:INFO:Declaring metric variables
2023-01-20 16:14:11,941:INFO:Importing untrained model
2023-01-20 16:14:11,948:INFO:AdaBoost Regressor Imported successfully
2023-01-20 16:14:11,960:INFO:Starting cross validation
2023-01-20 16:14:11,963:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:12,974:INFO:Calculating mean and std
2023-01-20 16:14:12,975:INFO:Creating metrics dataframe
2023-01-20 16:14:12,979:INFO:Uploading results into container
2023-01-20 16:14:12,980:INFO:Uploading model into container now
2023-01-20 16:14:12,980:INFO:_master_model_container: 15
2023-01-20 16:14:12,980:INFO:_display_container: 2
2023-01-20 16:14:12,981:INFO:AdaBoostRegressor(random_state=1808)
2023-01-20 16:14:12,981:INFO:create_model() successfully completed......................................
2023-01-20 16:14:13,078:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:13,078:INFO:Creating metrics dataframe
2023-01-20 16:14:13,099:INFO:Initializing Gradient Boosting Regressor
2023-01-20 16:14:13,100:INFO:Total runtime is 0.41475121180216473 minutes
2023-01-20 16:14:13,106:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:13,107:INFO:Initializing create_model()
2023-01-20 16:14:13,107:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:13,107:INFO:Checking exceptions
2023-01-20 16:14:13,107:INFO:Importing libraries
2023-01-20 16:14:13,107:INFO:Copying training dataset
2023-01-20 16:14:13,114:INFO:Defining folds
2023-01-20 16:14:13,114:INFO:Declaring metric variables
2023-01-20 16:14:13,120:INFO:Importing untrained model
2023-01-20 16:14:13,126:INFO:Gradient Boosting Regressor Imported successfully
2023-01-20 16:14:13,136:INFO:Starting cross validation
2023-01-20 16:14:13,138:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:14,299:INFO:Calculating mean and std
2023-01-20 16:14:14,300:INFO:Creating metrics dataframe
2023-01-20 16:14:14,304:INFO:Uploading results into container
2023-01-20 16:14:14,305:INFO:Uploading model into container now
2023-01-20 16:14:14,305:INFO:_master_model_container: 16
2023-01-20 16:14:14,306:INFO:_display_container: 2
2023-01-20 16:14:14,306:INFO:GradientBoostingRegressor(random_state=1808)
2023-01-20 16:14:14,306:INFO:create_model() successfully completed......................................
2023-01-20 16:14:14,400:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:14,400:INFO:Creating metrics dataframe
2023-01-20 16:14:14,423:INFO:Initializing Light Gradient Boosting Machine
2023-01-20 16:14:14,423:INFO:Total runtime is 0.43681546449661257 minutes
2023-01-20 16:14:14,429:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:14,430:INFO:Initializing create_model()
2023-01-20 16:14:14,430:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:14,430:INFO:Checking exceptions
2023-01-20 16:14:14,430:INFO:Importing libraries
2023-01-20 16:14:14,430:INFO:Copying training dataset
2023-01-20 16:14:14,437:INFO:Defining folds
2023-01-20 16:14:14,438:INFO:Declaring metric variables
2023-01-20 16:14:14,443:INFO:Importing untrained model
2023-01-20 16:14:14,449:INFO:Light Gradient Boosting Machine Imported successfully
2023-01-20 16:14:14,459:INFO:Starting cross validation
2023-01-20 16:14:14,461:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:15,610:INFO:Calculating mean and std
2023-01-20 16:14:15,611:INFO:Creating metrics dataframe
2023-01-20 16:14:15,616:INFO:Uploading results into container
2023-01-20 16:14:15,617:INFO:Uploading model into container now
2023-01-20 16:14:15,617:INFO:_master_model_container: 17
2023-01-20 16:14:15,618:INFO:_display_container: 2
2023-01-20 16:14:15,618:INFO:LGBMRegressor(random_state=1808)
2023-01-20 16:14:15,619:INFO:create_model() successfully completed......................................
2023-01-20 16:14:15,739:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:15,739:INFO:Creating metrics dataframe
2023-01-20 16:14:15,762:INFO:Initializing Dummy Regressor
2023-01-20 16:14:15,762:INFO:Total runtime is 0.45911896626154586 minutes
2023-01-20 16:14:15,767:INFO:SubProcess create_model() called ==================================
2023-01-20 16:14:15,767:INFO:Initializing create_model()
2023-01-20 16:14:15,768:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f4b9c77c940>, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:15,768:INFO:Checking exceptions
2023-01-20 16:14:15,768:INFO:Importing libraries
2023-01-20 16:14:15,768:INFO:Copying training dataset
2023-01-20 16:14:15,776:INFO:Defining folds
2023-01-20 16:14:15,776:INFO:Declaring metric variables
2023-01-20 16:14:15,781:INFO:Importing untrained model
2023-01-20 16:14:15,786:INFO:Dummy Regressor Imported successfully
2023-01-20 16:14:15,801:INFO:Starting cross validation
2023-01-20 16:14:15,804:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-01-20 16:14:16,254:INFO:Calculating mean and std
2023-01-20 16:14:16,255:INFO:Creating metrics dataframe
2023-01-20 16:14:16,259:INFO:Uploading results into container
2023-01-20 16:14:16,259:INFO:Uploading model into container now
2023-01-20 16:14:16,260:INFO:_master_model_container: 18
2023-01-20 16:14:16,260:INFO:_display_container: 2
2023-01-20 16:14:16,260:INFO:DummyRegressor()
2023-01-20 16:14:16,260:INFO:create_model() successfully completed......................................
2023-01-20 16:14:16,359:INFO:SubProcess create_model() end ==================================
2023-01-20 16:14:16,359:INFO:Creating metrics dataframe
2023-01-20 16:14:16,397:INFO:Initializing create_model()
2023-01-20 16:14:16,397:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-01-20 16:14:16,397:INFO:Checking exceptions
2023-01-20 16:14:16,400:INFO:Importing libraries
2023-01-20 16:14:16,400:INFO:Copying training dataset
2023-01-20 16:14:16,406:INFO:Defining folds
2023-01-20 16:14:16,406:INFO:Declaring metric variables
2023-01-20 16:14:16,406:INFO:Importing untrained model
2023-01-20 16:14:16,406:INFO:Declaring custom model
2023-01-20 16:14:16,407:INFO:Linear Regression Imported successfully
2023-01-20 16:14:16,409:INFO:Cross validation set to False
2023-01-20 16:14:16,409:INFO:Fitting Model
2023-01-20 16:14:16,671:INFO:LinearRegression(n_jobs=-1)
2023-01-20 16:14:16,671:INFO:create_model() successfully completed......................................
2023-01-20 16:14:16,863:INFO:_master_model_container: 18
2023-01-20 16:14:16,863:INFO:_display_container: 2
2023-01-20 16:14:16,864:INFO:LinearRegression(n_jobs=-1)
2023-01-20 16:14:16,864:INFO:compare_models() successfully completed......................................
2023-01-20 16:15:56,639:INFO:Initializing evaluate_model()
2023-01-20 16:15:56,639:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=LinearRegression(n_jobs=-1), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2023-01-20 16:15:56,798:INFO:Initializing plot_model()
2023-01-20 16:15:56,798:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, system=True)
2023-01-20 16:15:56,798:INFO:Checking exceptions
2023-01-20 16:15:56,802:INFO:Preloading libraries
2023-01-20 16:15:56,802:INFO:Copying training dataset
2023-01-20 16:15:56,802:INFO:Plot type: pipeline
2023-01-20 16:15:58,600:INFO:Visual Rendered Successfully
2023-01-20 16:15:58,697:INFO:plot_model() successfully completed......................................
2023-01-20 16:16:20,212:INFO:Initializing plot_model()
2023-01-20 16:16:20,213:INFO:plot_model(plot=parameter, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, system=True)
2023-01-20 16:16:20,213:INFO:Checking exceptions
2023-01-20 16:16:20,216:INFO:Preloading libraries
2023-01-20 16:16:20,216:INFO:Copying training dataset
2023-01-20 16:16:20,216:INFO:Plot type: parameter
2023-01-20 16:16:20,220:INFO:Visual Rendered Successfully
2023-01-20 16:16:20,323:INFO:plot_model() successfully completed......................................
2023-01-20 16:16:22,032:INFO:Initializing plot_model()
2023-01-20 16:16:22,032:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, system=True)
2023-01-20 16:16:22,033:INFO:Checking exceptions
2023-01-20 16:16:22,039:INFO:Preloading libraries
2023-01-20 16:16:22,039:INFO:Copying training dataset
2023-01-20 16:16:22,040:INFO:Plot type: pipeline
2023-01-20 16:16:22,173:INFO:Visual Rendered Successfully
2023-01-20 16:16:22,259:INFO:plot_model() successfully completed......................................
2023-01-20 16:16:58,049:INFO:Initializing plot_model()
2023-01-20 16:16:58,049:INFO:plot_model(plot=learning, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, system=True)
2023-01-20 16:16:58,049:INFO:Checking exceptions
2023-01-20 16:16:58,053:INFO:Preloading libraries
2023-01-20 16:16:58,053:INFO:Copying training dataset
2023-01-20 16:16:58,053:INFO:Plot type: learning
2023-01-20 16:16:58,299:INFO:Fitting Model
2023-01-20 16:16:58,796:INFO:Visual Rendered Successfully
2023-01-20 16:16:58,891:INFO:plot_model() successfully completed......................................
2023-01-20 16:17:23,654:INFO:Initializing plot_model()
2023-01-20 16:17:23,655:INFO:plot_model(plot=residuals, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, system=True)
2023-01-20 16:17:23,656:INFO:Checking exceptions
2023-01-20 16:17:23,662:INFO:Preloading libraries
2023-01-20 16:17:23,663:INFO:Copying training dataset
2023-01-20 16:17:23,663:INFO:Plot type: residuals
2023-01-20 16:17:25,131:INFO:Fitting Model
2023-01-20 16:17:25,131:WARNING:/home/pranith/.local/lib/python3.10/site-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

2023-01-20 16:17:25,286:INFO:Scoring test/hold-out set
2023-01-20 16:17:26,305:INFO:Visual Rendered Successfully
2023-01-20 16:17:26,427:INFO:plot_model() successfully completed......................................
2023-01-20 16:17:54,536:INFO:Initializing plot_model()
2023-01-20 16:17:54,537:INFO:plot_model(plot=feature, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=LinearRegression(n_jobs=-1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, system=True)
2023-01-20 16:17:54,537:INFO:Checking exceptions
2023-01-20 16:17:54,541:INFO:Preloading libraries
2023-01-20 16:17:54,542:INFO:Copying training dataset
2023-01-20 16:17:54,542:INFO:Plot type: feature
2023-01-20 16:17:54,836:INFO:Visual Rendered Successfully
2023-01-20 16:17:54,928:INFO:plot_model() successfully completed......................................
2023-01-20 16:18:17,290:INFO:Initializing predict_model()
2023-01-20 16:18:17,290:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, drift_report=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x7f4b46788ca0>)
2023-01-20 16:18:17,290:INFO:Checking exceptions
2023-01-20 16:18:17,291:INFO:Preloading libraries
2023-01-20 16:18:48,754:INFO:Initializing predict_model()
2023-01-20 16:18:48,754:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f4b477881c0>, estimator=LinearRegression(n_jobs=-1), probability_threshold=None, encoded_labels=False, raw_score=False, drift_report=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x7f4b4678a4d0>)
2023-01-20 16:18:48,755:INFO:Checking exceptions
2023-01-20 16:18:48,755:INFO:Preloading libraries
2023-01-20 16:18:48,757:INFO:Set up data.
2023-01-20 16:18:48,774:INFO:Set up index.
